% Analysis
%
% Analyzes and produces plots and statistics from visual acuity data
% specified by the user through input dialogues

% Add helper functions to path
libPath = fullfile(pwd, 'lib');
addpath(libPath); 

% Supress directory warnings
warning('off','MATLAB:MKDIR:DirectoryExists');

% Reset workspace and close figures
clear variables;
close all; 

%Input dialogue for data type
type = string(inputdlg({'Type (All/Study/Mock/Pilot)'}, ...
    'Session Info', [1 70], {'All'}));

if(strcmp(type,'All'))
    averageOver = true;
else
    % Input dialogue: average all data of the given type?
    dataAnswer = questdlg('Combine all subjects?', 'Data Selection', 'Yes', ...
        'No', 'Cancel', 'Yes');
    averageOver = strcmp(char(dataAnswer(1)),'Y');
    if strcmp(char(dataAnswer(1)),'C')
        return;
    end
end

if(averageOver)
    subjectName = "Averaged";
else
    % Input dialogue: subject name
    subjectName = string(inputdlg({'Subject name (all caps)'}, ...
        'Session Info', [1 70], {''}));
end

% Struct to contain y=ax fit parameters, including slope, Chi^2, reduced
% Chi^2, and error of the slope parameter for csv output
oneParamOutput = struct('type', type, ...
    'name', subjectName, ...
    'fc_slope', NaN, ...
    'fc_chi_sq', NaN, ...
    'fc_reduced_chi_sq', NaN, ...
    'fc_neg_error', NaN, ...
    'fc_pos_error', NaN, ...
    'l3_slope', NaN, ...
    'l3_chi_sq', NaN, ...
    'l3_reduced_chi_sq', NaN, ...
    'l3_neg_error', NaN, ...
    'l3_pos_error', NaN, ...
    'cp9_slope', NaN, ...
    'cp9_chi_sq', NaN, ...
    'cp9_reduced_chi_sq', NaN, ...
    'cp9_neg_error', NaN, ...
    'cp9_pos_error', NaN, ...
    'cp7_slope', NaN, ...
    'cp7_chi_sq', NaN, ...
    'cp7_reduced_chi_sq', NaN, ...
    'cp7_neg_error', NaN, ...
    'cp7_pos_error', NaN, ...
    'cp5_slope', NaN, ...
    'cp5_chi_sq', NaN, ...
    'cp5_reduced_chi_sq', NaN, ...
    'cp5_neg_error', NaN, ...
    'cp5_pos_error', NaN, ...
    'cp_slope', NaN, ...
    'cp_chi_sq', NaN, ...
    'cp_reduced_chi_sq', NaN, ...
    'cp_neg_error', NaN, ...
    'cp_pos_error', NaN, ...
    'cpo_slope', NaN, ...
    'cpo_chi_sq', NaN, ...
    'cpo_reduced_chi_sq', NaN, ...
    'cpo_neg_error', NaN, ...
    'cpo_pos_error', NaN, ...
    'cc9_slope', NaN, ...
    'cc9_chi_sq', NaN, ...
    'cc9_reduced_chi_sq', NaN, ...
    'cc9_neg_error', NaN, ...
    'cc9_pos_error', NaN, ...
    'cc3_slope', NaN, ...
    'cc3_chi_sq', NaN, ...
    'cc3_reduced_chi_sq', NaN, ...
    'cc3_neg_error', NaN, ...
    'cc3_pos_error', NaN, ...
    'ic_slope', NaN, ...
    'ic_chi_sq', NaN, ...
    'ic_reduced_chi_sq', NaN, ...
    'ic_neg_error', NaN, ...
    'ic_pos_error', NaN);
    
% Struct to contain y=ax+b fit parameters, including slope, intercept,
% Chi^2, reduced Chi^2, error of the slope and intercept parameter for csv 
% output
twoParamOutput = struct('type', type, ...
    'name', subjectName, ...
    'fc_slope', NaN, ...
    'fc_intercept', NaN, ...
    'fc_chi_sq', NaN, ...
    'fc_reduced_chi_sq', NaN, ...
    'fc_slope_neg_error', NaN, ...
    'fc_slope_pos_error', NaN, ...
    'fc_intercept_neg_error', NaN, ...
    'fc_intercept_pos_error', NaN, ...
    'l3_slope', NaN, ...
    'l3_intercept', NaN, ...
    'l3_chi_sq', NaN, ...
    'l3_reduced_chi_sq', NaN, ...
    'l3_slope_neg_error', NaN, ...
    'l3_slope_pos_error', NaN, ...
    'l3_intercept_neg_error', NaN, ...
    'l3_intercept_pos_error', NaN, ...
    'cp9_slope', NaN, ...
    'cp9_intercept', NaN, ...
    'cp9_chi_sq', NaN, ...
    'cp9_reduced_chi_sq', NaN, ...
    'cp9_slope_neg_error', NaN, ...
    'cp9_slope_pos_error', NaN, ...
    'cp9_intercept_neg_error', NaN, ...
    'cp9_intercept_pos_error', NaN, ...
    'cp7_slope', NaN, ...
    'cp7_intercept', NaN, ...
    'cp7_chi_sq', NaN, ...
    'cp7_reduced_chi_sq', NaN, ...
    'cp7_slope_neg_error', NaN, ...
    'cp7_slope_pos_error', NaN, ...
    'cp7_intercept_neg_error', NaN, ...
    'cp7_intercept_pos_error', NaN, ...
    'cp5_slope', NaN, ...
    'cp5_intercept', NaN, ...
    'cp5_chi_sq', NaN, ...
    'cp5_reduced_chi_sq', NaN, ...
    'cp5_slope_neg_error', NaN, ...
    'cp5_slope_pos_error', NaN, ...
    'cp5_intercept_neg_error', NaN, ...
    'cp5_intercept_pos_error', NaN, ...
    'cp_slope', NaN, ...
    'cp_intercept', NaN, ...
    'cp_chi_sq', NaN, ...
    'cp_reduced_chi_sq', NaN, ...
    'cp_slope_neg_error', NaN, ...
    'cp_slope_pos_error', NaN, ...
    'cp_intercept_neg_error', NaN, ...
    'cp_intercept_pos_error', NaN, ...
    'cpo_slope', NaN, ...
    'cpo_intercept', NaN, ...
    'cpo_chi_sq', NaN, ...
    'cpo_reduced_chi_sq', NaN, ...
    'cpo_slope_neg_error', NaN, ...
    'cpo_slope_pos_error', NaN, ...
    'cpo_intercept_neg_error', NaN, ...
    'cpo_intercept_pos_error', NaN, ...
    'cc9_slope', NaN, ...
    'cc9_intercept', NaN, ...
    'cc9_chi_sq', NaN, ...
    'cc9_reduced_chi_sq', NaN, ...
    'cc9_slope_neg_error', NaN, ...
    'cc9_slope_pos_error', NaN, ...
    'cc9_intercept_neg_error', NaN, ...
    'cc9_intercept_pos_error', NaN, ...
    'cc3_slope', NaN, ...
    'cc3_intercept', NaN, ...
    'cc3_chi_sq', NaN, ...
    'cc3_reduced_chi_sq', NaN, ...
    'cc3_slope_neg_error', NaN, ...
    'cc3_slope_pos_error', NaN, ...
    'cc3_intercept_neg_error', NaN, ...
    'cc3_intercept_pos_error', NaN, ...
    'ic_slope', NaN, ...
    'ic_intercept', NaN, ...
    'ic_chi_sq', NaN, ...
    'ic_reduced_chi_sq', NaN, ...
    'ic_slope_neg_error', NaN, ...
    'ic_slope_pos_error', NaN, ...
    'ic_intercept_neg_error', NaN, ...
    'ic_intercept_pos_error', NaN);

% Input dialogue: save plots?
dataAnswer = questdlg('Save plots?', 'Plot Output', 'Yes', 'No', 'Cancel', ...
    'Yes');
savePlots = (char(dataAnswer(1)) == 'Y');
if strcmp(char(dataAnswer(1)),'C')
    return;
end

% Input dialogue: save parameters?
dataAnswer = questdlg('Save parameters to csv?', 'Parameter Output', 'Yes', ...
    'No', 'Cancel', 'Yes');
saveParams = (char(dataAnswer(1)) == 'Y');
if strcmp(char(dataAnswer(1)),'C')
    return;
end

% Struct to store information about each protocol, including name, color,
% csv name, and which column holds the independent variable
info = struct('name', NaN, 'csvName', NaN, 'id', NaN, 'color', NaN, ...
    'discreteCol', 1);
info = repmat(info,1,11);

info(1).name = "Fully Crowded";
info(1).csvName = "T1";
info(1).id = "fc";
info(1).color = [0 0.8 0.8]; %Cyan
info(1).discreteCol = 2;

info(2).name = "Three Lines";
info(2).csvName = "Three Lines";
info(2).id = "l3";
info(2).color = [0.86 0.27 0.07]; %Burnt orange
info(2).discreteCol = 2;

info(3).name = "Crowded Periphery 9x9";
info(3).csvName = "Crowded Periphery 9x9";
info(3).id = "cp9";
info(3).color = [0.83 0.86 .035]; %Yellow

info(4).name = "Crowded Periphery 7x7";
info(4).csvName = "Crowded Periphery 7x7";
info(4).id = "cp7";
info(4).color = [0.69 0.57 .41]; %Brown/tan

info(5).name = "Crowded Periphery 5x5";
info(5).csvName = "Crowded Periphery 5x5";
info(5).id = "cp5";
info(5).color = [0.463 0.27 .96]; %Violet

info(6).name = "Crowded Periphery";
info(6).csvName = "Crowded Periphery";
info(6).id = "cp";
info(6).color = [0.9 0.3 0.9]; %Pink

info(7).name = "Crowded Periphery Outer";
info(7).csvName = "Crowded Periphery Outer";
info(7).id = "cpo";
info(7).color = [0.5 0 0.9]; %Purple

info(8).name = "Anstis";
info(8).csvName = "Anstis";
info(8).id = "a";
info(8).color = [0 0 0]; %Black

info(9).name = "Crowded Center 9x9";
info(9).csvName = "Crowded Center 9x9";
info(9).id = "cc9";
info(9).color = [0 0.1 1]; %Blue

info(10).name = "Crowded Center 3x3";
info(10).csvName = "Crowded Center 3x3";
info(10).id = "cc3";
info(10).color = [0.4 0.8 0.5]; %Green

info(11).name = "Isolated Character";
info(11).csvName = "Isolated Character";
info(11).id = "ic";
info(11).color = [1 0.6 0]; %Orange

% Input UI to select which protocols to include data from
global CHECKBOXES;
ButtonUI(info);
info(1).include = CHECKBOXES(1);
info(2).include = CHECKBOXES(2);
info(3).include = CHECKBOXES(3);
info(4).include = CHECKBOXES(4);
info(5).include = CHECKBOXES(5);
info(6).include = CHECKBOXES(6);
info(7).include = CHECKBOXES(7);
info(8).include = CHECKBOXES(8);
info(9).include = CHECKBOXES(9);
info(10).include = CHECKBOXES(10);
info(11).include = CHECKBOXES(11);

trimCC = true;
% if(CHECKBOXES(6) || CHECKBOXES(7))
%     % Input dialogue: trim small eccentricity values from crowded center?
%     dataAnswer = questdlg('Exclude small eccentricity from CC?',  ...
%         'CC Exclusion', 'Yes', 'No', 'Cancel', 'Yes');
%     trimCC = strcmp(char(dataAnswer(1)),'Y');
%     if strcmp(char(dataAnswer(1)),'C')
%         return;
%     end
% end

% Creating y = ax and y = ax+b figures
oneParamGraph = figure('Name','y = ax');
twoParamGraph = figure('Name','y = ax+b');

% Loop through info and analyze each protocol individually
for i = 1:(length(info))
    if ~info(i).include
        continue; % Skip if it was not selected in the UI pop-up
    end

    % Extract data from csv files, returning the raw data and the data with
    % outliers > +/-2.5 sigma from the mean removed
    [rawData, data, outliers] = readCsv(info(i).csvName,  info(i).id, ...
        type, subjectName, trimCC);
    
    % Pass the data along to the fitting function for Chi^2 minimization
    % and generation of graphs and parameter output
    [oneParamOutput, twoParamOutput] = analyzeData(data, rawData, ...
        info(i), oneParamOutput, twoParamOutput, oneParamGraph, ...
        twoParamGraph, savePlots, trimCC, averageOver);
    
end

% Axes and text formatting for y = ax plot
formatFigure(oneParamGraph, [0 45], [0 11], "Eccentricity (deg)", ...
    "Letter Height (deg)", "Letter Height vs. Retinal Eccentricity", ...
    false);

% Axes and text formatting for y = ax + b plot
formatFigure(twoParamGraph, [0 45], [0 11], "Eccentricity (deg)", ...
    "Letter Height (deg)", "Letter Height vs. Retinal Eccentricity", ...
    false);

if savePlots
    % If data was averaged, save the plots to Plots/Averaged/<type> 
    % otherwise in Plots/<type>/<subjectName>
    if(averageOver)
        folderName = fullfile(pwd, 'Plots', 'Averaged', type);
    else
        folderName = fullfile(pwd, 'Plots', string(oneParamOutput.type), ...
            string(oneParamOutput.name));
    end

    fileName = sprintf('%s%s', string(oneParamOutput.name), ...
        "_one_param.png");
    saveas(oneParamGraph, fullfile(folderName, fileName));
    
    fileName = sprintf('%s%s', string(oneParamOutput.name), ...
        "_two_param.png");
    saveas(twoParamGraph, fullfile(folderName, fileName));
end

% Converts the parameter output structs into tables and writes them to csv
% files within the present working directory
if saveParams
    oneParam = struct2table(oneParamOutput);
    oneParamFileName = 'one_parameter_statistics.csv';
    if(exist(oneParamFileName, 'file') ~= 2) % If file does not exist, print column names
        writetable(oneParam,oneParamFileName,'WriteRowNames',true);
    else
        writetable(oneParam,oneParamFileName,'WriteRowNames',false, ...
            'WriteMode', 'Append')
    end
    
    twoParam = struct2table(twoParamOutput);
    twoParamFileName = 'two_parameter_statistics.csv';
    if(exist(twoParamFileName, 'file') ~= 2) % If file does not exist, print column names
        writetable(twoParam,twoParamFileName,'WriteRowNames',true);
    else
        writetable(twoParam,twoParamFileName,'WriteRowNames',false, ...
            'WriteMode', 'Append')
    end
end

uiwait(helpdlg('Click OK to finish and close figures'));
close all;