% Analysis
% Created by Patrick Wilson on 1/20/2020
% Github.com/patrickmwilson
% Created for the Elegant Mind Collaboration at UCLA 
% with Professor Katsushi Arisaka
% Copyright ï¿½ 2020 Elegant Mind Collaboration. All rights reserved.

% Creates a compiled scatter plot with best fit chi-squared minimized
% fit lines, a compiled scatter plot with weighted least sum of squares fit 
% lines, a compiled log10-log10 plot with a best fit line, a scatter 
% plot and histogram of Letter height/Eccentricity for each subject 
% (divided and distribution figures), and residual plots and histograms.

% Add helper functions to path
libPath = fullfile(pwd, 'lib');
addpath(libPath); 

% Supress directory warnings
warning('off','MATLAB:MKDIR:DirectoryExists');

% Reset workspace and close figures
clear variables;
close all; 

% Input dialogue: all data?
dataAnswer = questdlg('Select Data', 'Data Selection', 'Active Data', ...
    'All Data', 'Cancel', 'Active Data');
allData = strcmp(char(dataAnswer(2)),'l');
if strcmp(char(dataAnswer(1)),'C')
    return;
end

if allData
    sub_info = {'0','All','Averaged','00'};
else
    % Input dialogue for session index, type, subject code, and date of session 
    sub_info = inputdlg({'Type (Study/Mock/Internal)', ...
        'Subject Code (all caps)'},  ...
        'Session Info', [1 70], {'Internal','TEST'}); 
    sub_info = sub_info';
end

oneParamOutput = struct('type', sub_info{1,1}, ...
    'name', sub_info{1,2}, ...
    'fc_slope', NaN, ...
    'fc_chi_sq', NaN, ...
    'fc_reduced_chi_sq', NaN, ...
    'fc_neg_error', NaN, ...
    'fc_pos_error', NaN, ...
    'cp_slope', NaN, ...
    'cp_chi_sq', NaN, ...
    'cp_reduced_chi_sq', NaN, ...
    'cp_neg_error', NaN, ...
    'cp_pos_error', NaN, ...
    'cpo_slope', NaN, ...
    'cpo_chi_sq', NaN, ...
    'cpo_reduced_chi_sq', NaN, ...
    'cpo_neg_error', NaN, ...
    'cpo_pos_error', NaN, ...
    'cc9_slope', NaN, ...
    'cc9_chi_sq', NaN, ...
    'cc9_reduced_chi_sq', NaN, ...
    'cc9_neg_error', NaN, ...
    'cc9_pos_error', NaN, ...
    'cc3_slope', NaN, ...
    'cc3_chi_sq', NaN, ...
    'cc3_reduced_chi_sq', NaN, ...
    'cc3_neg_error', NaN, ...
    'cc3_pos_error', NaN, ...
    'ic_slope', NaN, ...
    'ic_chi_sq', NaN, ...
    'ic_reduced_chi_sq', NaN, ...
    'ic_neg_error', NaN, ...
    'ic_pos_error', NaN);
    
twoParamOutput = struct('type', sub_info{1,1}, ...
    'name', sub_info{1,2}, ...
    'fc_slope', NaN, ...
    'fc_intercept', NaN, ...
    'fc_chi_sq', NaN, ...
    'fc_reduced_chi_sq', NaN, ...
    'fc_neg_error', NaN, ...
    'fc_pos_error', NaN, ...
    'cp_slope', NaN, ...
    'cp_intercept', NaN, ...
    'cp_chi_sq', NaN, ...
    'cp_reduced_chi_sq', NaN, ...
    'cp_neg_error', NaN, ...
    'cp_pos_error', NaN, ...
    'cpo_slope', NaN, ...
    'cpo_intercept', NaN, ...
    'cpo_chi_sq', NaN, ...
    'cpo_reduced_chi_sq', NaN, ...
    'cpo_neg_error', NaN, ...
    'cpo_pos_error', NaN, ...
    'cc9_slope', NaN, ...
    'cc9_intercept', NaN, ...
    'cc9_chi_sq', NaN, ...
    'cc9_reduced_chi_sq', NaN, ...
    'cc9_neg_error', NaN, ...
    'cc9_pos_error', NaN, ...
    'cc3_slope', NaN, ...
    'cc3_intercept', NaN, ...
    'cc3_chi_sq', NaN, ...
    'cc3_reduced_chi_sq', NaN, ...
    'cc3_neg_error', NaN, ...
    'cc3_pos_error', NaN, ...
    'ic_slope', NaN, ...
    'ic_intercept', NaN, ...
    'ic_chi_sq', NaN, ...
    'ic_reduced_chi_sq', NaN, ...
    'ic_neg_error', NaN, ...
    'ic_pos_error', NaN);

% Checkbox input dialogue - chooses which protocols to include data from
global CHECKBOXES;
names = ["Fully Crowded", "Crowded Periphery 9x9", "Crowded Periphery", ...
    "Crowded Periphery Outer", "Anstis", "Crowded Center 9x9",  ...
    "Crowded Center 3x3", "Isolated Character"];
ButtonUI(names);

trimCC = true;
if(CHECKBOXES(6) || CHECKBOXES(7))
    % Input dialogue: save plots?
    dataAnswer = questdlg('Exclude small eccentricity from CC?',  ...
        'CC Exclusion', 'Yes', 'No', 'Cancel', 'Yes');
    trimCC = strcmp(char(dataAnswer(1)),'Y');
    if strcmp(char(dataAnswer(1)),'C')
        return;
    end
end

% Input dialogue: save plots?
dataAnswer = questdlg('Save plots?', 'Plot Output', 'Yes', 'No', 'Cancel', ...
    'Yes');
savePlots = (char(dataAnswer(1)) == 'Y');
if strcmp(char(dataAnswer(1)),'C')
    return;
end

% Input dialogue: save parameters?
dataAnswer = questdlg('Save parameters to csv?', 'Parameter Output', 'Yes', ...
    'No', 'Cancel', 'Yes');
saveParams = (char(dataAnswer(1)) == 'Y');
if strcmp(char(dataAnswer(1)),'C')
    return;
end

info = struct('name', NaN, 'csvName', NaN, 'id', NaN, 'color', NaN);
info = repmat(info,1,8);

info(1).name = "Fully Crowded";
info(1).csvName = "T1";
info(1).id = "fc";
info(1).color = [0 0.8 0.8];
info(1).include = CHECKBOXES(1);

info(2).name = "Crowded Periphery 9x9";
info(2).csvName = "Crowded Periphery 9x9";
info(2).id = "cp9";
info(2).color = [0.83 0.86 .035];
info(2).include = CHECKBOXES(2);

info(3).name = "Crowded Periphery";
info(3).csvName = "Crowded Periphery";
info(3).id = "cp";
info(3).color = [0.9 0.3 0.9];
info(3).include = CHECKBOXES(3);

info(4).name = "Crowded Periphery Outer";
info(4).csvName = "Crowded Periphery Outer";
info(4).id = "cpo";
info(4).color = [0.5 0 0.9];
info(4).include = CHECKBOXES(4);

info(5).name = "Anstis";
info(5).csvName = "Anstis";
info(5).id = "a";
info(5).color = [0 0 0];
info(5).include = CHECKBOXES(5);

info(6).name = "Crowded Center 9x9";
info(6).csvName = "Crowded Center 9x9";
info(6).id = "cc9";
info(6).color = [0 0.1 1];
info(6).include = CHECKBOXES(6);

info(7).name = "Crowded Center 3x3";
info(7).csvName = "Crowded Center 3x3";
info(7).id = "cc3";
info(7).color = [0.4 0.8 0.5];
info(7).include = CHECKBOXES(7);

info(8).name = "Isolated Character";
info(8).csvName = "Isolated Character";
info(8).id = "ic";
info(8).color = [1 0.6 0];
info(8).include = CHECKBOXES(8);

% Creating y = ax and y = ax+b figures
oneParamGraph = figure('Name','y = ax');
twoParamGraph = figure('Name','y = ax+b');

% Make directory to save plots and params
mkdir(fullfile(pwd, 'Analysis_Results'));

for i = 1:(length(info))
    if ~info(i).include
        continue;
    end
    
    name = info(i).name;
    csvName = info(i).csvName;
    id = info(i).id;
    color = info(i).color;
    
    [rawData, data, outliers] = readCsv(csvName, id, allData, trimCC);
    
    [oneParamOutput, twoParamOutput] = makeFigs(data, rawData, name, id, ...
        color, oneParamOutput, twoParamOutput, oneParamGraph, twoParamGraph, ...
        savePlots);
    
end

% Axes and text formatting for point slope plot
formatFigure(oneParamGraph, [0 45], [0 11], "Eccentricity (deg)", ...
    "Letter Height (deg)", "Letter Height vs. Retinal Eccentricity", ...
    false);

% Axes and text formatting for point slope plot
formatFigure(twoParamGraph, [0 45], [0 11], "Eccentricity (deg)", ...
    "Letter Height (deg)", "Letter Height vs. Retinal Eccentricity", ...
    false);

if savePlots
    folderName = fullfile(pwd, 'Analysis_Results', 'Plots', ...
        string(oneParamOutput.type), string(oneParamOutput.name));

    fileName = sprintf('%s%s', string(oneParamOutput.name), ...
        "_one_param.png");
    saveas(oneParamGraph, fullfile(folderName, fileName));
    
    fileName = sprintf('%s%s', string(oneParamOutput.name), ...
        "_two_param.png");
    saveas(twoParamGraph, fullfile(folderName, fileName));
end

if saveParams
    oneParam = struct2table(oneParamOutput);
    oneParamFileName = 'one_parameter_statistics.csv';
    if(exist(oneParamFileName, 'file') ~= 2)
        writetable(oneParam,oneParamFileName,'WriteRowNames',true);
    else
        writetable(oneParam,oneParamFileName,'WriteRowNames',false, ...
            'WriteMode', 'Append')
    end
    
    twoParam = struct2table(twoParamOutput);
    twoParamFileName = 'two_parameter_statistics.csv';
    if(exist(twoParamFileName, 'file') ~= 2)
        writetable(twoParam,twoParamFileName,'WriteRowNames',true);
    else
        writetable(twoParam,twoParamFileName,'WriteRowNames',false, ...
            'WriteMode', 'Append')
    end
end

uiwait(helpdlg('Click OK to finish and close figures'));
close all;